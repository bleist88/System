#!/usr/local/bin/python3
"""
This script is used to plot a set of spectrums in a SpectrumPlot from a
configurations file.
"""

from AstroLib import *

################################################################################

##  Default Configurations.

title       = None

figsize     = 14, 6
xlabel      = "Wavelength  [$\AA$]"
ylabel      = "Flux"
xlim        = None
ylim        = None
xscale      = None
yscale      = None
marker      = "k-"

name        = None
norm        = None
redshift    = 0

################################################################################

##  Parsing.

Parser  = Io.ArgParser( sys.argv )

Parser.add_argument(
    name            = "configs_file",
    default         = None,
    type            = str,
    key             = None,
    flag            = "-c",
    contains        = None,
    required        = False,
    description     = "A SpectrumPlot configurations file."
)

Parser.add_argument(
    name            = "input_file",
    default         = None,
    type            = str,
    key             = None,
    flag            = "-l",
    contains        = None,
    required        = False,
    description     = "A list file of SEDs and Filters."
)

Parser.parse_arguments()
Parser.check_satisfied()

################################################################################

##  Initialize Spectrum Plot.

SP          = PlotLib.SpectrumPlot( figsize=figsize )

##  Get configs from configs file.

configs     = Io.get_configs( Parser.get("configs_file") )
inputs      = Io.get_configs( Parser.get("input_file") )

filters     = Io.read( configs["filters_file"] )
templates   = Io.read( configs["templates_file"] )

figsize     = configs["figsize"]
title       = configs["title"]
xlabel      = " ".join( configs["xlabel"] )
ylabel      = " ".join( configs["ylabel"] )
xlim        = configs["xlim"]
ylim        = configs["ylim"]
xscale      = configs["xscale"]
yscale      = configs["yscale"]

##  Place all filters and templates into a single array.

spectra     = np.zeros(
    filters.size + templates.size,
    dtype={
        "names":    [ "file", "spectrum", "publisher" ],
        "formats":  [ "U32", "U32", "U32" ],
    }
)

i = 0

for f in filters:

    spectra[i]["file"]          = f["file"]
    spectra[i]["spectrum"]      = f["filter"]
    spectra[i]["publisher"]     = f["instrument"]
    i += 1

for t in templates:

    spectra[i]["file"]          = t["file"]
    spectra[i]["spectrum"]      = t["template"]
    spectra[i]["publisher"]     = t["publisher"]
    i += 1

##  Loop through all input files.
##  Retrieve the spectral data from file.
##  Add to the spectrum plot.

for i in range( len(inputs) ):

    spectrum    = inputs[i]["spectrum"]
    publisher   = inputs[i]["publisher"]

    for j in range( spectra.size ):

        if spectra[j]["spectrum"] == spectrum

    spectrum    = Io.read(
        configs[i]["spectrum"]
    )

    wavelength  = spectrum["wavelength"] * ( 1 + configs[i]["redshift"] )
    flux        = spectrum["flux"] * configs[i]["scale"]

    SP.setup(
        xlabel=xlabel,  ylabel=ylabel,
        xunit=None,     yunit=None,
        xlim=xlim,      ylim=ylim,
        xscale=xscale,  yscale=yscale
    )

    SP.plot(
        wavelength, flux,
        name=configs[i]["name"], norm=False, marker=configs[i]["marker"]
    )

pyplot.show()
