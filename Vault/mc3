#!/usr/local/bin/python3
"""
Master script to Mc3 subscript functions.
"""

from AstroLib import *
from mc3_create     import mc3_create
from mc3_add        import mc3_add
from mc3_combine    import mc3_combine
from mc3_write      import mc3_write
from mc3_select     import mc3_select

################################################################################

##  Create the main argument parser.

Parser  = Io.ArgParser( sys.argv )

Parser.add_argument(
    name            = "create",
    default         = False,
    type            = str,
    key             = "create",
    flag            = None,
    contains        = None,
    required        = False,
    description     = "This signals the option to create an Mc3.Cube()."
)

Parser.add_argument(
    name            = "add",
    default         = False,
    type            = str,
    key             = "add",
    flag            = None,
    contains        = None,
    required        = False,
    description     = "This signals the option to create an Mc3.Cube()."
)

Parser.add_argument(
    name            = "combine",
    default         = False,
    type            = str,
    key             = "combine",
    flag            = None,
    contains        = None,
    required        = False,
    description     = "This signals the option to combine a set of catalogs."
)

Parser.add_argument(
    name            = "write",
    default         = False,
    type            = str,
    key             = "write",
    flag            = None,
    contains        = None,
    required        = False,
    description     = "This signals the option to write output from Mc3.Cube()."
)

Parser.add_argument(
    name            = "rewrite",
    default         = False,
    type            = str,
    key             = "rewrite",
    flag            = None,
    contains        = None,
    required        = False,
    description     = "This signals the option to rewrite a catalog."
)

Parser.add_argument(
    name            = "select",
    default         = False,
    type            = str,
    key             = "select",
    flag            = None,
    contains        = None,
    required        = False,
    description     = "This signals the option to write output from Mc3.Cube()."
)

Parser.parse_arguments()
Parser.check_satisfied()

##  Troubleshoot.

arguments   = [ "create", "add", "combine", "write", "select" ]
satisfied   = False

for arg in arguments:

    if Parser.get( arg ):

        if satisfied is False:

            satisfied = True

        else:

            raise Exception( "Too many arguments were provided." )

if satisfied is False:

    print( "Please provide one of the following arguments." )

    for arg in arguments:

        print( "    %s" % arg )

################################################################################

##  Choose the subscript to run.

if Parser.get("create"):

    mc3_create( sys.argv )

elif Parser.get("add"):

    mc3_add( sys.argv )

elif Parser.get("combine"):

    mc3_combine( sys.argv )

elif Parser.get("write"):

    mc3_write( sys.argv )

elif Parser.get("select"):

    mc3_select( sys.argv )
